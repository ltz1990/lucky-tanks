
package lc.client.webservice.wscode;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import lc.client.util.ClientConstant;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "ServerWebServiceImplService", targetNamespace = "http://webservice.service.server.lc/", wsdlLocation = "http://localhost/WebService?wsdl")
public class ServerWebServiceImplService
    extends Service
{

    private final static URL SERVERWEBSERVICEIMPLSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(lc.client.webservice.wscode.ServerWebServiceImplService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            /**
             * 这里取的是相对路径，生成XML缓存，但是从applet启动时取不到，改为user.dir
             */
            //baseUrl = lc.client.webservice.wscode.ServerWebServiceImplService.class.getResource(".");
           //baseUrl=new URL(ClientConstant.USER_PATH); 
            baseUrl=new File(ClientConstant.USER_PATH).toURI().toURL();
            url = new URL(baseUrl, "http://localhost/WebService?wsdl");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://localhost/WebService?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        SERVERWEBSERVICEIMPLSERVICE_WSDL_LOCATION = url;
    }

    public ServerWebServiceImplService(URL wsdlLocation, QName serviceName) {
    	//父类中用到了/META-INF/services/javax.xml.ws.spi.Provider等文件，应在服务端返回找不到文件
        super(wsdlLocation, serviceName);
    }

    public ServerWebServiceImplService() {
        super(SERVERWEBSERVICEIMPLSERVICE_WSDL_LOCATION, new QName("http://webservice.service.server.lc/", "ServerWebServiceImplService"));
    }

    /**
     * 
     * @return
     *     returns ServerWebService
     */
    @WebEndpoint(name = "ServerWebServiceImplPort")
    public ServerWebService getServerWebServiceImplPort() {
        return super.getPort(new QName("http://webservice.service.server.lc/", "ServerWebServiceImplPort"), ServerWebService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServerWebService
     */
    @WebEndpoint(name = "ServerWebServiceImplPort")
    public ServerWebService getServerWebServiceImplPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://webservice.service.server.lc/", "ServerWebServiceImplPort"), ServerWebService.class, features);
    }

}
